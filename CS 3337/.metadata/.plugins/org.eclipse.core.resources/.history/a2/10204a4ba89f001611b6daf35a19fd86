package TGEU;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Bounds;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Data;
import javafx.scene.control.Button;
import javafx.scene.image.*;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.stage.Stage;
import javafx.scene.effect.Blend;
import javafx.scene.effect.BlendMode;
import javafx.scene.effect.ColorAdjust;
import javafx.scene.effect.ColorInput;

public class MyGymController  implements Initializable{
	private static Stage stage;
	private static Scene home;
	
	@FXML
	private Button homeButton;
	@FXML
	private PieChart chartOfPie;
	@FXML
	private ImageView bike1;
	
	//database:GED
	//table:gymequip
	//table:machineusage
	public ArrayList<GymEquipment> gymEquip(){
		//reads from database and creates GymEquipment object's with the data
		ArrayList<GymEquipment> equipments = new ArrayList<GymEquipment>();
		Connection c = null;
		try{
			Class.forName("com.mysql.jdbc.Driver");
			String url = "jdbc:mysql://192.241.213.248/GED";
	        String username = "allen3just";
	        String password = "Justanswer30!";
	        
	        c = DriverManager.getConnection( url, username, password );
	        Statement stmt = c.createStatement();
	        ResultSet rs = stmt.executeQuery( "select * from machineusage;" );
	        
	        while( rs.next() ){
            	
                GymEquipment equipment = new GymEquipment( rs.getInt( "id" ),
                    rs.getString( "type" ), rs.getString( "equipment" ), rs.getInt( "state" ));
                
                
                equipments.add( equipment );
            }
		}
		catch( Exception e ){
			e.printStackTrace();
	    }finally{
	    	try{
                if( c != null ) c.close();
            }
            catch( Exception e ){
            	e.printStackTrace();
            }
	    }
		
		return equipments;
	}
	
	public void displayChart(ArrayList<GymEquipment> equipments){
		
		ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();
		
		//gets list of different equipment and counts the number of equipment in use
		ArrayList<EquipmentType> equipmentTypes = new ArrayList<EquipmentType>();
		int j = 1;
		int total = 0;
		int inUse = 0;
		int available = 0;
		for(int i=0; i < equipments.size(); i++){
			total++;
			
			if(equipments.get(i).getState() == 1)
				inUse++;
			if(equipments.get(i).getState() == 2)
				available++;
			
			if(i == equipments.size() - 1 || equipments.get(i).getId() % 10 == j && equipments.get(i+1).getId() % 10 == j + 1){
				System.out.println(i + " " + equipments.get(i).getId() + " " + equipments.get(i).getId()%10 + " " +j);
				
				equipmentTypes.add(new EquipmentType(j, equipments.get(i).getType(), total, inUse, available));
				inUse = 0;
				available = 0;
				j++;
			}
				
		}
		
		for(int i=0; i < equipmentTypes.size(); i++){
			pieChartData.add(new PieChart.Data(equipmentTypes.get(i).getType() + "(" + equipmentTypes.get(i).getInUse() + ")", equipmentTypes.get(i).getInUse()));
		}
		
		pieChartData.add(new PieChart.Data("Available" + "(" + equipments.size() + ")", equipments.size()));
		
	    chartOfPie.setData(pieChartData);
	    chartOfPie.setLabelsVisible(false);
	    chartOfPie.setLegendVisible(true);

	}
	
	public void machineUsage(GymEquipment equipment){
		//gets the state of the machine and sets the background color of the image
		Paint paint = Color.GRAY;
		
		if(equipment.getState() == 1)
			paint = Color.GREEN;
		if(equipment.getState() == 2)
			paint = Color.RED;
		
	    Bounds bound = bike1.getBoundsInLocal();
	    ColorInput color = new ColorInput();
	    color.setX(bound.getMinX());
	    color.setY(bound.getMinY());
	    color.setWidth(bound.getWidth());
	    color.setHeight(bound.getHeight());
	    color.setPaint(paint);
	    
	    ColorAdjust monochrome = new ColorAdjust();
	    monochrome.setSaturation(-1.0);
	    
	    Blend background = new Blend(BlendMode.MULTIPLY, monochrome, color);
	    
	    bike1.setEffect(background);
	}
	
	public void setBackground(ImageView equipment, Blend background){
		
	}
	
	
	
	@FXML
    private LineChart<String,Number> dailyHistory;
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
		displayChart(gymEquip());
		
        XYChart.Series<String, Number> series = new XYChart.Series<String, Number>();
        
	    series.getData().add(new Data<String, Number>(" Sun ", 40));
	    series.getData().add(new Data<String, Number>(" Mon ", 25));
	    series.getData().add(new Data<String, Number>(" Tue ", 20));
	    series.getData().add(new Data<String, Number>(" Wed ", 30));
	    series.getData().add(new Data<String, Number>(" Thu ", 40));
	    series.getData().add(new Data<String, Number>(" Fri ", 50));
	    series.getData().add(new Data<String, Number>(" Sat ", 65));
	    
	    dailyHistory.getData().add(series);
	}

    public static void setStage(Stage s) {
        stage = s;
    }
    public static void setHome(Scene h) {
        home = h;
    }
	public void toHome(){
		stage.setScene(home);
	}
	
	

	
}

